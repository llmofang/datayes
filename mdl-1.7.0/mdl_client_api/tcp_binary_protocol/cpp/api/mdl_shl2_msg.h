// Generated by the code_gen tool.  DO NOT EDIT!
// source: C:/SVN/project/mdl/src/resource/mdl_shl2_msg.xml
// time: 2015/07/04 15:32:56

#pragma once

#include "mdl_api_types.h"

namespace datayes {
namespace mdl {
namespace mdl_shl2_msg {

static const uint16_t MDLVID_MDL_SHL2 = 101;

enum MDL_SHL2MessageID {
	MDLMID_MDL_SHL2_SHL1Stock = 2,
	MDLMID_MDL_SHL2_SHL2Transaction = 3,
	MDLMID_MDL_SHL2_SHL2MarketData = 4,
	MDLMID_MDL_SHL2_SHL2VirtualAuctionPrice = 5,
	MDLMID_MDL_SHL2_SHL2Index = 6,
	MDLMID_MDL_SHL2_SHL2MarketOverview = 7,
	MDLMID_MDL_SHL2_SHL2Statics = 8,
	MDLMID_MDL_SHL2_OPTLevel1 = 9
};

#pragma pack(1)

struct SHL1Stock {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL1Stock
	};
	MDLAnsiString SecurityID;
	MDLUTF8String SecurityName;
	MDLFloatT<3> PreCloPrice;
	MDLFloatT<3> OpenPrice;
	int64_t Turnover;
	MDLFloatT<3> HighPrice;
	MDLFloatT<3> LowPrice;
	MDLFloatT<3> LastPrice;
	uint64_t Volume;
	MDLFloatT<3> PE;
	uint64_t BidVolume1;
	MDLFloatT<3> BidPrice1;
	uint64_t BidVolume2;
	MDLFloatT<3> BidPrice2;
	uint64_t BidVolume3;
	MDLFloatT<3> BidPrice3;
	uint64_t BidVolume4;
	MDLFloatT<3> BidPrice4;
	uint64_t BidVolume5;
	MDLFloatT<3> BidPrice5;
	uint64_t AskVolume1;
	MDLFloatT<3> AskPrice1;
	uint64_t AskVolume2;
	MDLFloatT<3> AskPrice2;
	uint64_t AskVolume3;
	MDLFloatT<3> AskPrice3;
	uint64_t AskVolume4;
	MDLFloatT<3> AskPrice4;
	uint64_t AskVolume5;
	MDLFloatT<3> AskPrice5;
};

struct SHL2Transaction {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2Transaction
	};
	int32_t DataStatus;
	int32_t TradeIndex;
	int32_t TradeChan;
	MDLAnsiString SecurityID;
	MDLTime TradTime;
	MDLFloatT<3> TradPrice;
	MDLDoubleT<3> TradVolume;
	MDLDoubleT<5> TradeMoney;
	int64_t TradeBuyNo;
	int64_t TradeSellNo;
	MDLAnsiString TradeBSFlag;
};

struct SHL2MarketData {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2MarketData
	};
	MDLTime UpdateTime;
	MDLAnsiString SecurityID;
	int32_t ImageStatus;
	MDLFloatT<3> PreCloPrice;
	MDLFloatT<3> OpenPrice;
	MDLFloatT<3> HighPrice;
	MDLFloatT<3> LowPrice;
	MDLFloatT<3> LastPrice;
	MDLFloatT<3> ClosePrice;
	MDLAnsiString InstruStatus;
	uint32_t TradNumber;
	MDLDoubleT<3> TradVolume;
	MDLDoubleT<5> Turnover;
	MDLDoubleT<3> TotalBidVol;
	MDLFloatT<3> WAvgBidPri;
	MDLFloatT<3> AltWAvgBidPri;
	MDLDoubleT<3> TotalAskVol;
	MDLFloatT<3> WAvgAskPri;
	MDLFloatT<3> AltWAvgAskPri;
	uint32_t EtfBuyNumber;
	MDLDoubleT<3> EtfBuyVolume;
	MDLDoubleT<5> EtfBuyMoney;
	uint32_t EtfSellNumber;
	MDLDoubleT<3> EtfSellVolume;
	MDLDoubleT<5> ETFSellMoney;
	MDLFloatT<4> YieldToMatu;
	MDLDoubleT<3> TotWarExNum;
	MDLDoubleT<3> WarLowerPri;
	MDLDoubleT<3> WarUpperPri;
	uint32_t WiDBuyNum;
	MDLDoubleT<3> WiDBuyVol;
	MDLDoubleT<5> WiDBuyMon;
	uint32_t WiDSellNum;
	MDLDoubleT<3> WiDSellVol;
	MDLDoubleT<5> WiDSellMon;
	uint32_t TotBidNum;
	uint32_t TotSellNum;
	uint32_t MaxBidDur;
	uint32_t MaxSellDur;
	uint32_t BidNum;
	uint32_t SellNum;
	struct BidLevelsItem {
		uint32_t PriLevOpera;
		MDLFloatT<3> OrderPrice;
		MDLDoubleT<3> OrderVol;
		uint32_t OrderNum;
		struct NOrdersItem {
			uint32_t OrderQueOper;
			uint32_t OrderQueID;
			MDLDoubleT<3> OrderQty;
		};
		MDLListT<NOrdersItem> NOrders;
	};
	MDLListT<BidLevelsItem> BidLevels;
	struct SellLevelsItem {
		uint32_t PriLevOpera;
		MDLFloatT<3> OrderPrice;
		MDLDoubleT<3> OrderVol;
		uint32_t OrderNum;
		struct NoOrdersItem {
			uint32_t OrderQueOper;
			uint32_t OrderQueID;
			MDLDoubleT<3> OrderQty;
		};
		MDLListT<NoOrdersItem> NoOrders;
	};
	MDLListT<SellLevelsItem> SellLevels;
	MDLFloatT<3> IOPV;
};

struct SHL2VirtualAuctionPrice {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2VirtualAuctionPrice
	};
	MDLTime UpdateTime;
	uint32_t DataStatus;
	MDLAnsiString SecurityID;
	MDLFloatT<3> VirPri;
	MDLDoubleT<3> VirAucQty;
	MDLDoubleT<3> LeaQty;
	MDLAnsiString Side;
};

struct SHL2Index {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2Index
	};
	MDLTime UpdateTime;
	uint32_t DataStatus;
	MDLAnsiString SecurityID;
	MDLDoubleT<5> PreCloseIndex;
	MDLDoubleT<5> OpenIndex;
	MDLDoubleT<1> Turnover;
	MDLDoubleT<5> HighIndex;
	MDLDoubleT<5> LowIndex;
	MDLDoubleT<5> LastIndex;
	MDLTime TradTime;
	MDLDoubleT<5> TradVolume;
	MDLDoubleT<5> CloseIndex;
};

struct SHL2MarketOverview {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2MarketOverview
	};
	MDLTime UpdateTime;
	uint32_t DataStatus;
	MDLAnsiString SecurityID;
	uint32_t UpdateMill;
	MDLDate TradDay;
};

struct SHL2Statics {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_SHL2Statics
	};
	MDLAnsiString SecurityID;
	MDLTime UpdateTime;
	MDLFloatT<3> OpenPrice;
	MDLFloatT<3> HighPrice;
	MDLFloatT<3> LowPrice;
	MDLFloatT<3> ClosePrice;
	MDLDoubleT<3> TradVolume;
	MDLDoubleT<5> Turnover;
};

struct OPTLevel1 {
	enum {
		ServiceID = MDLSID_MDL_SHL2,
		ServiceVer = MDLVID_MDL_SHL2,
		MessageID = MDLMID_MDL_SHL2_OPTLevel1
	};
	MDLTime UpdateTime;
	int32_t DataStatus;
	MDLAnsiString SecurityID;
	int32_t ImageStatus;
	MDLDoubleT<4> PreSettlPrice;
	MDLDoubleT<4> SettlPrice;
	MDLDoubleT<4> OpenPx;
	MDLDoubleT<4> HighPx;
	MDLDoubleT<4> LowPx;
	MDLDoubleT<4> LastPx;
	MDLDoubleT<4> ClosePx;
	MDLDoubleT<4> AuctionPrice;
	int64_t AuctionQty;
	int64_t TotalLongPosition;
	struct BidPriceLevelItem {
		int64_t BidSize;
		MDLDoubleT<4> BidPx;
	};
	MDLListT<BidPriceLevelItem> BidPriceLevel;
	struct OfferPriceLevelItem {
		int64_t OfferSize;
		MDLDoubleT<4> OfferPx;
	};
	MDLListT<OfferPriceLevelItem> OfferPriceLevel;
	int64_t TotalVolumeTrade;
	MDLDoubleT<2> TotalValueTrade;
	MDLAnsiString TradingPhaseCode;
	MDLTime OrigTime;
};

#pragma pack()

} // namespace mdl_shl2_msg
} // namespace mdl
} // namespace datayes
